local v = require('lib.vectorial')
local entity = require('game.Entity')

return fn(x, y, levelLoader) {
  local animations = require('data.animations.player')

  local player = entity(
    x, y,
    levelLoader,
    animations,
    {w = 17, h = 38},
    {x = -26, y = -23}
  )

  player.gravity = 18 / 0.0166
  player.speed = 25 / 0.0166
  player.jumpForce = 370
  player.wallJumpForce = 270
  player.wallJumpHForce = 575
  player.ghost = 0
  player.ghostAllowed = .2
  player.ghostSlide = 0
  player.upGravScale = .6
  player.downGravScale = 1.1
  player.maxFallSpeed = 400
  player.runThreshold = 0.01
  player.isSliding = false
  player.slidingTime = 0
  player.slidingDir = 0
  player.slidingGhost = 0


  player.entDraw = player.draw
  fn player:draw() {
    self:entDraw()
    if self.isSliding and DoParticles {
      local x, y = self:getPos()
      if self.flipped {
        x += self.size.w + 3
      } else {
        x -= 3
      }
      love.graphics.setAlpha(math.max(0, math.min(255, 255 * (self.slidingTime - .2 / 1))))
      love.graphics.draw(SlideParticles, x, y, 0, self.flipped and -1 or 1, 1)
      love.graphics.setAlpha(255)
    }
  }

  player.entUpdate = player.update
  fn player:update(dt) {
    ##Check in correct chunk
    local dmp = (self.vel * self.damp) * ((v.Vector2D(dt, dt) / v.Vector2D(0.0166, 0.0166)))
    local upd = self.pos + ((self.vel - dmp) * v.Vector2D(dt, dt))
    Chunks:update(upd:getX(), upd:getY())

    ##Update physics and anim etc
    self:entUpdate(dt)

    ##Reduced Gravity
    if Input:get('jump') != 0 and self.vel:getY() < 0 {
      self:addForce(0, self.gravity * self.upGravScale)
    } else {
      self:addForce(0, self.gravity * self.downGravScale)
    }

    ##Max fall speed
    if self.vel:getY() > self.maxFallSpeed {
      self.vel:setY(self.maxFallSpeed)
    }

    ##Flipped
    if self.vel:getX() != 0 {self.flipped = self.vel:getX() > 0}

    ##Animation
    if (Input:get('right') - Input:get('left')) != 0 and self.ghost == 0 {
      self:setAnim('run')
    } else {
      self:setAnim('idle')
    }

    ##Sliding
    local dir = sign((Input:get('right') - Input:get('left')))
    local dirs = {-1, 1}
    self.isSliding = false
    foreach dir in dirs {
      if not self:empty(self.pos:getX() + (1 * dir), self.pos:getY(), fn(ent){return string.match(ent.id, 'dirt')}) {
        self:setAnim('wall')
        self.flipped = dir > 0
        self.isSliding = true
        self.slidingDir = dir
        self.vel:setY(Easing.inQuad(self.slidingTime, 20, 80 - 20, 2))
      }
    }
    if self.isSliding {
      self.slidingTime += dt
      self.slidingGhost = 0
    } else {
      self.slidingGhost += dt
      self.slidingTime = 0
    }

    if self.isSliding or self.slidingGhost < .1 {
      if Input:pressed('jump') {
        self.slidingGhost = 0
        self:addForce(-self.slidingDir * (self.wallJumpHForce / dt), 0)
        self.vel:setY(-self.wallJumpForce)
        JumpSound:play()
      }
    }

    if self.ghost != 0 and not self.isSliding {
      if math.abs(self.vel:getX()) > .3 or true{
        if self.vel:getY() < 0 {
          self:setAnim('speedRise')
        } else {
          self:setAnim('speedFall')
        }
      } else {
        if self.vel:getY() < 0 {
          self:setAnim('rise')
        } else {
          self:setAnim('fall')
        }
      }
    }

    ##Running
    self:addForce((Input:get('right') - Input:get('left')) * self.speed, 0)

    ##Jumping
    if Input:pressed('jump') and (self.ghost < self.ghostAllowed) and self.vel:getY() >= 0 {
      self.vel:setY(-self.jumpForce)
      JumpSound:play()
    }

    if self:empty(self.pos:getX(), self.pos:getY() + 1) {
      self.ghost += dt
    } else {
      self.ghost = 0
      if (Input:get('right') - Input:get('left')) != 0 {
        local xx, yy = self:getPos()
      }
    }

    ##Check for spikes
    local check = self:checkFor(
      self.pos:getX(), self.pos:getY(),
      fn(x){return x == 'BG' or x == 'Background'},
      fn(ent){return string.match(ent.id, 'spike') or string.match(ent.id, '32')}
    )
    if check {
      DeathSound:play()
      Running = false
    }

    ##Update
    if DoParticles {
      WaterParticles:update(dt)
      SlideParticles:update(dt)
      SlideParticles:emit(1)
    }
  }

  fn player:getPos() {
    return self.pos:getX(), self.pos:getY()
  }

  return player
}
