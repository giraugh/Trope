##Init
love.graphics.setDefaultFilter('nearest', 'nearest')
love.graphics.setBackgroundColor(63, 99, 82, 255)
love.window.setTitle('Fish-Boy')
love.filesystem.setIdentity('Fish-Boy')
love.window.setMode(800, 600, {resizable=true, vsync=false, minwidth=400, minheight=300})
love.math.setRandomSeed(math.random())

##Libraries
require('core.helpers')
pprint = require('core.tableprint')(require('core.serpent'))

##Classes
local profiler = require('lib.profiler')
local camera = require('game.Camera')
local player = require('game.Player')
local chunks = require('game.Chunks')
local slideParticles = require('game.SlideParticles')
local particles = require('game.Particles')
local water = require('game.Water')
local dc = require('game.DiffCurve')
local hs = require('game.HighScores')
local skills = require('game.Skills')
WaveShader = require('game.WaveShader')
GUI = require('game.GUI')
OutlineShader = require('game.OutlineShader')
Easing = require('lib.easing')

Menu = true
Running = true
Fade = 0
DoShaders = true
DoParticles = true
DoShowChunkBorders = false
Distance = 0

##Images
title = love.graphics.newImage('imgs/Title.png')
stitle = love.graphics.newImage('imgs/Subtitle.png')
BGimage = love.graphics.newImage('imgs/background.png')
talpha = 255

##Audio
DeathSound = love.audio.newSource('DeathShort.wav')
JumpSound = love.audio.newSource('Jump.wav')
JumpSound:setVolume(.3)
DrinkSound = love.audio.newSource('Yay.wav')
Music = love.audio.newSource('FireDarer-sawsquarenoise.mp3')
Music:setVolume(.6)
Music:setLooping(true)

##Skill Controller
Skills = skills()

##Chunks
Chunks = chunks()
Chunks:init()

##Input
Input = require('data.controls')

fn love.load() {
  love.graphics.setFont(love.graphics.newFont(50))

  ##Difficulty Curve Controller
  DC = dc()

  ##Reset Skills
  Skills:reset()

  ##High Scores Controller
  HS = hs()
  HS:init()

  ##Particle Systems
  SlideParticles = slideParticles()
  WaterParticles = particles()
  WaterParticles:init('imgs/particles/water.png')

  ##Water Controller
  Water = water()

  ##Create chunks and player
  local px, py = Chunks:restart()
  Player = player(px, py, Chunks:getCurrent())

  ##Create camera and point it at player
  Camera = camera()
  Camera:lookAt(Player:getPos())
  Camera.scale = 2
}

fn love.update(dt) {
  Input:update()

  if Input:pressed('esc') {
    if Menu {
      if not Running {
        love.event.quit()
      }
    } else {
      Menu = true
    }
  }

  if Input:pressed('shaderToggle') {DoShaders = not DoShaders}
  if Input:pressed('particleToggle') {DoParticles = not DoParticles}
  if Input:pressed('borderToggle') {DoShowChunkBorders = not DoShowChunkBorders}
  if Input:get('zoomOut') != 0 {
    if Water.enabled {
      Camera.defZoom -= .3 * dt
    } else {
      Camera.scale -= .3 * dt
    }
  }
  if Input:pressed('vsyncToggle') {
    local w, h, f = love.window.getMode()
    f.vsync = not f.vsync
    love.window.setMode(w, h, f)
  }

  if not Menu {
    Water:update(dt)
    DC:update(dt)
    HS:update(dt)
    Camera:trackPlayer(dt)
  }
  GUI.update()
  if Running {
    Player:update(dt)
    Distance = math.floor((Player.pos:getX() - Player.startPos) / 16)
  }
}

fn love.draw() {
  love.graphics.draw(BGimage, 0, -200, 0, 2)
  Camera:attach()
  Chunks:draw()
  Player:draw()
  if DoParticles {WaterParticles:draw()}
  Camera:detach()
  GUI.draw()
}

fn love.quit() {
  HS:save()
}
